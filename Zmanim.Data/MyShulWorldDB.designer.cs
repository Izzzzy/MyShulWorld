#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Zmanim.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyShulWorld")]
	public partial class MyShulWorldDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventType(EventType instance);
    partial void UpdateEventType(EventType instance);
    partial void DeleteEventType(EventType instance);
    partial void InsertExclusion(Exclusion instance);
    partial void UpdateExclusion(Exclusion instance);
    partial void DeleteExclusion(Exclusion instance);
    partial void InsertRestriction(Restriction instance);
    partial void UpdateRestriction(Restriction instance);
    partial void DeleteRestriction(Restriction instance);
    #endregion
		
		public MyShulWorldDBDataContext() : 
				base(global::Zmanim.Data.Properties.Settings.Default.MyShulWorldConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyShulWorldDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyShulWorldDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyShulWorldDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyShulWorldDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventType> EventTypes
		{
			get
			{
				return this.GetTable<EventType>();
			}
		}
		
		public System.Data.Linq.Table<Exclusion> Exclusions
		{
			get
			{
				return this.GetTable<Exclusion>();
			}
		}
		
		public System.Data.Linq.Table<Restriction> Restrictions
		{
			get
			{
				return this.GetTable<Restriction>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _EventName;
		
		private string _Time;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _EventTypeId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEventNameChanging(string value);
    partial void OnEventNameChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnEventTypeIdChanging(System.Nullable<int> value);
    partial void OnEventTypeIdChanged();
    #endregion
		
		public Event()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventName", DbType="VarChar(50)")]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this.OnEventNameChanging(value);
					this.SendPropertyChanging();
					this._EventName = value;
					this.SendPropertyChanged("EventName");
					this.OnEventNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="VarChar(50)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeId", DbType="Int")]
		public System.Nullable<int> EventTypeId
		{
			get
			{
				return this._EventTypeId;
			}
			set
			{
				if ((this._EventTypeId != value))
				{
					this.OnEventTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EventTypeId = value;
					this.SendPropertyChanged("EventTypeId");
					this.OnEventTypeIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventTypes")]
	public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<bool> _Fixed;
		
		private string _FixedTime;
		
		private System.Nullable<int> _BasedOn;
		
		private System.Nullable<int> _TimeDifference;
		
		private string _Identifier;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _YearsPopulated;
		
		private string _TypesOfDaysApplicable;
		
		private string _DaysOfWeekApplicable;
		
		private string _TypesOfDaysExcluded;
		
		private EntitySet<Exclusion> _Exclusions;
		
		private EntitySet<Restriction> _Restrictions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFixedChanging(System.Nullable<bool> value);
    partial void OnFixedChanged();
    partial void OnFixedTimeChanging(string value);
    partial void OnFixedTimeChanged();
    partial void OnBasedOnChanging(System.Nullable<int> value);
    partial void OnBasedOnChanged();
    partial void OnTimeDifferenceChanging(System.Nullable<int> value);
    partial void OnTimeDifferenceChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnYearsPopulatedChanging(string value);
    partial void OnYearsPopulatedChanged();
    partial void OnTypesOfDaysApplicableChanging(string value);
    partial void OnTypesOfDaysApplicableChanged();
    partial void OnDaysOfWeekApplicableChanging(string value);
    partial void OnDaysOfWeekApplicableChanged();
    partial void OnTypesOfDaysExcludedChanging(string value);
    partial void OnTypesOfDaysExcludedChanged();
    #endregion
		
		public EventType()
		{
			this._Exclusions = new EntitySet<Exclusion>(new Action<Exclusion>(this.attach_Exclusions), new Action<Exclusion>(this.detach_Exclusions));
			this._Restrictions = new EntitySet<Restriction>(new Action<Restriction>(this.attach_Restrictions), new Action<Restriction>(this.detach_Restrictions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fixed", DbType="Bit")]
		public System.Nullable<bool> Fixed
		{
			get
			{
				return this._Fixed;
			}
			set
			{
				if ((this._Fixed != value))
				{
					this.OnFixedChanging(value);
					this.SendPropertyChanging();
					this._Fixed = value;
					this.SendPropertyChanged("Fixed");
					this.OnFixedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixedTime", DbType="VarChar(50)")]
		public string FixedTime
		{
			get
			{
				return this._FixedTime;
			}
			set
			{
				if ((this._FixedTime != value))
				{
					this.OnFixedTimeChanging(value);
					this.SendPropertyChanging();
					this._FixedTime = value;
					this.SendPropertyChanged("FixedTime");
					this.OnFixedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasedOn", DbType="Int")]
		public System.Nullable<int> BasedOn
		{
			get
			{
				return this._BasedOn;
			}
			set
			{
				if ((this._BasedOn != value))
				{
					this.OnBasedOnChanging(value);
					this.SendPropertyChanging();
					this._BasedOn = value;
					this.SendPropertyChanged("BasedOn");
					this.OnBasedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeDifference", DbType="Int")]
		public System.Nullable<int> TimeDifference
		{
			get
			{
				return this._TimeDifference;
			}
			set
			{
				if ((this._TimeDifference != value))
				{
					this.OnTimeDifferenceChanging(value);
					this.SendPropertyChanging();
					this._TimeDifference = value;
					this.SendPropertyChanged("TimeDifference");
					this.OnTimeDifferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="VarChar(50)")]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearsPopulated", DbType="VarChar(50)")]
		public string YearsPopulated
		{
			get
			{
				return this._YearsPopulated;
			}
			set
			{
				if ((this._YearsPopulated != value))
				{
					this.OnYearsPopulatedChanging(value);
					this.SendPropertyChanging();
					this._YearsPopulated = value;
					this.SendPropertyChanged("YearsPopulated");
					this.OnYearsPopulatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypesOfDaysApplicable", DbType="VarChar(50)")]
		public string TypesOfDaysApplicable
		{
			get
			{
				return this._TypesOfDaysApplicable;
			}
			set
			{
				if ((this._TypesOfDaysApplicable != value))
				{
					this.OnTypesOfDaysApplicableChanging(value);
					this.SendPropertyChanging();
					this._TypesOfDaysApplicable = value;
					this.SendPropertyChanged("TypesOfDaysApplicable");
					this.OnTypesOfDaysApplicableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysOfWeekApplicable", DbType="VarChar(50)")]
		public string DaysOfWeekApplicable
		{
			get
			{
				return this._DaysOfWeekApplicable;
			}
			set
			{
				if ((this._DaysOfWeekApplicable != value))
				{
					this.OnDaysOfWeekApplicableChanging(value);
					this.SendPropertyChanging();
					this._DaysOfWeekApplicable = value;
					this.SendPropertyChanged("DaysOfWeekApplicable");
					this.OnDaysOfWeekApplicableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypesOfDaysExcluded", DbType="VarChar(50)")]
		public string TypesOfDaysExcluded
		{
			get
			{
				return this._TypesOfDaysExcluded;
			}
			set
			{
				if ((this._TypesOfDaysExcluded != value))
				{
					this.OnTypesOfDaysExcludedChanging(value);
					this.SendPropertyChanging();
					this._TypesOfDaysExcluded = value;
					this.SendPropertyChanged("TypesOfDaysExcluded");
					this.OnTypesOfDaysExcludedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Exclusion", Storage="_Exclusions", ThisKey="ID", OtherKey="EventTypeId")]
		public EntitySet<Exclusion> Exclusions
		{
			get
			{
				return this._Exclusions;
			}
			set
			{
				this._Exclusions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Restriction", Storage="_Restrictions", ThisKey="ID", OtherKey="EventTypeId")]
		public EntitySet<Restriction> Restrictions
		{
			get
			{
				return this._Restrictions;
			}
			set
			{
				this._Restrictions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Exclusions(Exclusion entity)
		{
			this.SendPropertyChanging();
			entity.EventType = this;
		}
		
		private void detach_Exclusions(Exclusion entity)
		{
			this.SendPropertyChanging();
			entity.EventType = null;
		}
		
		private void attach_Restrictions(Restriction entity)
		{
			this.SendPropertyChanging();
			entity.EventType = this;
		}
		
		private void detach_Restrictions(Restriction entity)
		{
			this.SendPropertyChanging();
			entity.EventType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exclusions")]
	public partial class Exclusion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Exclusion1;
		
		private int _EventTypeId;
		
		private EntityRef<EventType> _EventType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnExclusion1Changing(string value);
    partial void OnExclusion1Changed();
    partial void OnEventTypeIdChanging(int value);
    partial void OnEventTypeIdChanged();
    #endregion
		
		public Exclusion()
		{
			this._EventType = default(EntityRef<EventType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Exclusion", Storage="_Exclusion1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Exclusion1
		{
			get
			{
				return this._Exclusion1;
			}
			set
			{
				if ((this._Exclusion1 != value))
				{
					this.OnExclusion1Changing(value);
					this.SendPropertyChanging();
					this._Exclusion1 = value;
					this.SendPropertyChanged("Exclusion1");
					this.OnExclusion1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeId", DbType="Int NOT NULL")]
		public int EventTypeId
		{
			get
			{
				return this._EventTypeId;
			}
			set
			{
				if ((this._EventTypeId != value))
				{
					if (this._EventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EventTypeId = value;
					this.SendPropertyChanged("EventTypeId");
					this.OnEventTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Exclusion", Storage="_EventType", ThisKey="EventTypeId", OtherKey="ID", IsForeignKey=true)]
		public EventType EventType
		{
			get
			{
				return this._EventType.Entity;
			}
			set
			{
				EventType previousValue = this._EventType.Entity;
				if (((previousValue != value) 
							|| (this._EventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType.Entity = null;
						previousValue.Exclusions.Remove(this);
					}
					this._EventType.Entity = value;
					if ((value != null))
					{
						value.Exclusions.Add(this);
						this._EventTypeId = value.ID;
					}
					else
					{
						this._EventTypeId = default(int);
					}
					this.SendPropertyChanged("EventType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Restrictions")]
	public partial class Restriction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Restriction1;
		
		private int _EventTypeId;
		
		private EntityRef<EventType> _EventType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRestriction1Changing(string value);
    partial void OnRestriction1Changed();
    partial void OnEventTypeIdChanging(int value);
    partial void OnEventTypeIdChanged();
    #endregion
		
		public Restriction()
		{
			this._EventType = default(EntityRef<EventType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Restriction", Storage="_Restriction1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Restriction1
		{
			get
			{
				return this._Restriction1;
			}
			set
			{
				if ((this._Restriction1 != value))
				{
					this.OnRestriction1Changing(value);
					this.SendPropertyChanging();
					this._Restriction1 = value;
					this.SendPropertyChanged("Restriction1");
					this.OnRestriction1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeId", DbType="Int NOT NULL")]
		public int EventTypeId
		{
			get
			{
				return this._EventTypeId;
			}
			set
			{
				if ((this._EventTypeId != value))
				{
					if (this._EventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EventTypeId = value;
					this.SendPropertyChanged("EventTypeId");
					this.OnEventTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Restriction", Storage="_EventType", ThisKey="EventTypeId", OtherKey="ID", IsForeignKey=true)]
		public EventType EventType
		{
			get
			{
				return this._EventType.Entity;
			}
			set
			{
				EventType previousValue = this._EventType.Entity;
				if (((previousValue != value) 
							|| (this._EventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType.Entity = null;
						previousValue.Restrictions.Remove(this);
					}
					this._EventType.Entity = value;
					if ((value != null))
					{
						value.Restrictions.Add(this);
						this._EventTypeId = value.ID;
					}
					else
					{
						this._EventTypeId = default(int);
					}
					this.SendPropertyChanged("EventType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
